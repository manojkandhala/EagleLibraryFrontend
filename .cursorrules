ASSISTANT RULES
Holistic understanding of requirements & stack
Don’t apologize for errors: fix them
You may ask about stack assumptions if writing code
TECHNOLOGY STACK
Frontend:
- Framework: Next.js (React)
- Language: TypeScript
- UI Components: shadcn/ui (based on Radix UI primitives)
- Styling: Tailwind CSS
- Icons: Lucide React
Backend:
- Framework: FastAPI (Python)
LLM Integration:
- Python wrapper for LLM interaction
- API endpoint to connect frontend with Python backend
Services:
- Stripe for payments
- AWS S3 for file storage
CODING ENVIRONMENT
The user asks questions about the following coding languages:
- ReactJS
- NextJS
- JavaScript
- TypeScript
- TailwindCSS
- HTML
- CSS
- Python
CODE IMPLEMENTATION GUIDELINES
Follow these rules when you write code:
- Use early returns whenever possible to make the code more readable.
- Always use Tailwind classes for styling HTML elements; avoid using CSS or <style> tags.
- Use “className:” instead of the tertiary operator in class tags whenever possible.
- Use descriptive variable and function/const names. Also, event functions should be named with a “handle” prefix, like “handleClick” for onClick and “handleKeyDown” for onKeyDown.
- Implement accessibility features on elements. For example, an <a> tag should have a tabindex=“0”, aria-label, on:click, and on:keydown, and similar attributes.
- Use consts instead of functions, for example, “const toggle = () =>”. Also, define a type if possible.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling[3].
- Implement responsive design with Tailwind CSS; use a mobile-first approach[3].
Backend (Python - FastAPI)
- Follow best practices for FastAPI project structure.
- Use appropriate authentication and authorization mechanisms.
- Implement API endpoints for the Next.js frontend to consume[1][3].
- Ensure CORS is properly configured to allow requests from the Next.js frontend [1][3].
Data Fetching from FastAPI in Next.js:
- Use the `fetch` API or libraries like Axios to make requests to FastAPI endpoints[1][3].
- Handle different HTTP methods (GET, POST, PUT, DELETE) appropriately.
- Use `useEffect` in React components to fetch data on component mount or when dependencies change[1].
Stripe Integration:
- Implement Stripe Checkout for payment processing.
- Set up webhooks to handle successful payments and other events.
S3 Integration:
- Use AWS SDK for Python (boto3) to interact with S3.
- Implement file upload and download functionality.
Key Conventions
- Use 'nuqs' for URL search parameter state management.
Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC)[3].
- Wrap client components in Suspense with fallback[3].
- Use dynamic loading for non-critical components[3].
- Optimize images: use WebP format, include size data, implement lazy loading[3].
Limit 'use client':
- Favor server components and Next.js SSR[3].
- Use only for Web API access in small components[3].
- Avoid for data fetching or state management[3].
Follow Next.js docs for Data Fetching, Rendering, and Routing[3].
File Structure for Styling
- Place Stylus module files next to their corresponding component files.
- Example structure:
components/
Button/
Button.js
Button.module.styl
Card/
Card.js
Card.module.styl

UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling[3].
- Implement responsive design with Tailwind CSS; use a mobile-first approach[3].
- To add a component, use the command: `npx shadcn@latest add [component]` [1][3]. For example, to add a button: `npx shadcn@latest add button` [1][9].
- Alternatively, you can run `pnpm dlx shadcn@latest add [component]` [1].
- To initialize your project, use the command: `pnpm dlx shadcn@latest init` [1]. This command installs dependencies, adds the `cn` util, configures `tailwind.config.js`, and CSS variables for the project [1].
